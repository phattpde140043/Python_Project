import streamlit as st
import plotly.express as px
import pandas as pd
import time
from api_utils import (
    get_country_data, get_country_info_api, get_sample_country_info_api,
    get_db_countries, valid_iso3_codes, indicator_mapping, geo_regions, get_country_data_by_iso3
)
from sidebar_info import render_sidebar
from data_processor import data_processor
from ai_analyzer import ai_analyzer

# =========================
# üîß C·∫§U H√åNH GIAO DI·ªÜN
# =========================
st.markdown("""
    <style>
        /* ·∫®n danh s√°ch link trang (index / Data_Page) */
        div[data-testid="stSidebarNav"] {display: none;}
        /* ·∫®n n√∫t m≈©i t√™n collapse m·∫∑c ƒë·ªãnh */
        div[data-testid="collapsedControl"] {display: none;}
    </style>
""", unsafe_allow_html=True)

# =========================
# üè∑Ô∏è HEADER PYTHON-THU·∫¶N
# =========================
st.title("üìä D·ªØ li·ªáu kinh t·∫ø qu·ªëc gia")
st.divider()

# =========================
# üìä X·ª¨ L√ù D·ªÆ LI·ªÜU
# =========================
def process_country_data():
    """L·∫•y d·ªØ li·ªáu t·ª´ DB v√† ph√¢n lo·∫°i h·ª£p l·ªá / b·ªã lo·∫°i."""
    data = get_country_info_map()
    valid, excluded = [], []

    for country in data:
        name = country.get("name", "").lower()
        iso = country.get("iso_code", None)
        entry = {
            "code": iso,
            "country_name": country.get("name"),
            "gdp_billion": country.get("indicator", {}).get("NY.GDP.MKTP.CD", 0) / 1e9,
            "population": country.get("indicator", {}).get("SP.POP.TOTL"),
            "gdp_per_capita": country.get("indicator", {}).get("NY.GDP.PCAP.CD"),
            "unemployment_rate": country.get("indicator", {}).get("SL.UEM.TOTL.ZS"),
            "inflation_rate": country.get("indicator", {}).get("FP.CPI.TOTL.ZG")
        }

        if name == "world" or iso not in valid_iso3_codes:
            excluded.append(entry)
        else:
            valid.append(entry)

    return pd.DataFrame(valid), pd.DataFrame(excluded)

def enrich_with_coordinates(df):
    """B·ªï sung t·ªça ƒë·ªô t·ª´ API."""
    coords = []
    for code in df["code"]:
        info = get_sample_country_info_api(code)
        coords.append({
            "code": code,
            "latitude": info.get("latitude") if "error" not in info else None,
            "longitude": info.get("longitude") if "error" not in info else None
        })
    return df.merge(pd.DataFrame(coords), on="code", how="left")

# Chu·∫©n b·ªã d·ªØ li·ªáu
valid_df, excluded_df = process_country_data()
merged_df = enrich_with_coordinates(valid_df)

# =========================
# SIDEBAR
# =========================
selected_country, iso3_code = render_sidebar(merged_df)

# =========================
# TRANG CH√çNH
# =========================
# Ch·ªâ ch·∫°y khi ƒë√£ ch·ªçn qu·ªëc gia
if selected_country:
    # Ki·ªÉm tra n·∫øu qu·ªëc gia thay ƒë·ªïi
    if "last_country" not in st.session_state or st.session_state.last_country != selected_country:
        st.session_state.last_country = selected_country
        with st.spinner("ü§ñ ƒêang t·∫£i th√¥ng tin ..."):
            ai_info = ai_analyzer.analyze_country_overview(selected_country)
            st.session_state.ai_info = ai_info
    
    st.write(st.session_state.get("ai_info", ""))

    country_data = get_country_data_by_iso3(iso3_code=iso3_code)
    
    # L∆∞u tr·ªØ th√¥ng tin v·ªÅ c√°c bi·ªÉu ƒë·ªì ƒë√£ v·∫Ω
    chart_data_list = []

    for indicator_code, indicator_data in country_data["data"].items():
        # Chu·∫©n b·ªã DataFrame cho t·ª´ng indicator
        df = pd.DataFrame(indicator_data["data"])
        if df.empty:
            continue

        # L·∫•y t√™n ƒë·∫ßy ƒë·ªß c·ªßa ch·ªâ s·ªë t·ª´ d·ªØ li·ªáu JSON
        indicator_name = indicator_data.get("indicator_name", indicator_code)
        chart_title = f"{indicator_name} c·ªßa {country_data['country_name']}"

        # V·∫Ω line chart ri√™ng cho t·ª´ng indicator
        fig = px.line(
            df,
            x="year",
            y="value",
            markers=True,
            title=chart_title,
            labels={"year": "NƒÉm", "value": indicator_name}
        )

        st.plotly_chart(fig, use_container_width=True)
        
        # L∆∞u th√¥ng tin bi·ªÉu ƒë·ªì ƒë·ªÉ ph√¢n t√≠ch
        chart_info = {
            "indicator_name": indicator_name,
            "indicator_code": indicator_code,
            "data": df,
            "country_name": country_data['country_name'],
            "trend": "tƒÉng" if len(df) > 1 and df['value'].iloc[-1] > df['value'].iloc[0] else "gi·∫£m",
            "latest_value": df['value'].iloc[-1] if not df.empty else None,
            "latest_year": df['year'].iloc[-1] if not df.empty else None,
            "min_value": df['value'].min() if not df.empty else None,
            "max_value": df['value'].max() if not df.empty else None,
            "average_value": df['value'].mean() if not df.empty else None
        }
        chart_data_list.append(chart_info)
        
        # =========================
        # PH√ÇN T√çCH AI CHO T·ª™NG BI·ªÇU ƒê·ªí
        # =========================
        with st.expander(f"Ph√¢n t√≠ch: {indicator_name}", expanded=False):
            with st.spinner(f"ƒêang ph√¢n t√≠ch {indicator_name}..."):
                try:
                    # T·∫°o prompt ph√¢n t√≠ch cho t·ª´ng ch·ªâ s·ªë
                    indicator_prompt = f"""
                    Ph√¢n t√≠ch ch·ªâ s·ªë {indicator_name} c·ªßa {selected_country}:
                    - Gi√° tr·ªã hi·ªán t·∫°i: {chart_info['latest_value']}
                    - NƒÉm: {chart_info['latest_year']}
                    - Xu h∆∞·ªõng: {chart_info['trend']}
                    - Gi√° tr·ªã th·∫•p nh·∫•t: {chart_info['min_value']}
                    - Gi√° tr·ªã cao nh·∫•t: {chart_info['max_value']}
                    - Gi√° tr·ªã trung b√¨nh: {chart_info['average_value']:.2f}
                    
                    D·ªØ li·ªáu qua c√°c nƒÉm:
                    {df.to_string(index=False)}
                    
                    H√£y ph√¢n t√≠ch:
                    1. √ù nghƒ©a c·ªßa ch·ªâ s·ªë n√†y
                    2. Xu h∆∞·ªõng ph√°t tri·ªÉn
                    3. T√°c ƒë·ªông ƒë·∫øn n·ªÅn kinh t·∫ø
                    4. So s√°nh v·ªõi c√°c nƒÉm tr∆∞·ªõc
                    """
                    
                    # G·ªçi AI ph√¢n t√≠ch t·ª´ng ch·ªâ s·ªë
                    indicator_analysis = ai_analyzer.analyze_single_indicator(indicator_prompt)
                    st.write("### üìã Ph√¢n t√≠ch chi ti·∫øt")
                    st.write(indicator_analysis)
                    
                    # HI·ªÜN TH·ªä TH·ªêNG K√ä THAY V√å B·∫¢NG ƒê·∫¶Y ƒê·ª¶
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric(
                            label="Gi√° tr·ªã hi·ªán t·∫°i",
                            value=f"{chart_info['latest_value']:,.2f}",
                            delta=f"{chart_info['trend']}"
                        )
                    with col2:
                        change_pct = ((df['value'].iloc[-1] - df['value'].iloc[0]) / df['value'].iloc[0] * 100) if df['value'].iloc[0] != 0 else 0
                        st.metric(
                            label="Thay ƒë·ªïi t·ªïng",
                            value=f"{change_pct:.2f}%",
                            delta_color="normal"
                        )
                    with col3:
                        st.metric(
                            label="Th·ªùi k·ª≥",
                            value=f"{df['year'].min()}-{df['year'].max()}"
                        )
                    with col4:
                        st.metric(
                            label="S·ªë nƒÉm d·ªØ li·ªáu",
                            value=f"{len(df)} nƒÉm"
                        )
                    
                    # TH√äM T√ôY CH·ªåN XEM D·ªÆ LI·ªÜU ƒê·∫¶Y ƒê·ª¶ N·∫æU C·∫¶N
                    with st.expander("üìä Xem d·ªØ li·ªáu chi ti·∫øt (t√πy ch·ªçn)"):
                        st.dataframe(df, use_container_width=True)
                        
                except Exception as e:
                    st.error(f"L·ªói khi ph√¢n t√≠ch {indicator_name}: {str(e)}")

    # =========================
    # PH√ÇN T√çCH AI T·ªîNG QUAN T·∫§T C·∫¢ BI·ªÇU ƒê·ªí
    # =========================
    if chart_data_list:
        with st.expander("ü§ñ AI Ph√¢n t√≠ch t·ªïng quan t·∫•t c·∫£ ch·ªâ s·ªë", expanded=False):
            st.subheader("üìà Ph√¢n t√≠ch t·ªïng quan kinh t·∫ø")
            
            with st.spinner("AI ƒëang ph√¢n t√≠ch t·ªïng h·ª£p t·∫•t c·∫£ ch·ªâ s·ªë..."):
                try:
                    # T·∫°o b·∫£ng t·ªïng h·ª£p d·ªØ li·ªáu
                    summary_data = []
                    for chart in chart_data_list:
                        if not chart['data'].empty:
                            df = chart['data']
                            change_pct = ((df['value'].iloc[-1] - df['value'].iloc[0]) / df['value'].iloc[0] * 100) if df['value'].iloc[0] != 0 else 0
                            summary_data.append({
                                'Ch·ªâ s·ªë': chart['indicator_name'],
                                'Gi√° tr·ªã g·∫ßn nh·∫•t': f"{chart['latest_value']:,.2f}",
                                'NƒÉm': chart['latest_year'],
                                'Xu h∆∞·ªõng': chart['trend'],
                                'Thay ƒë·ªïi (%)': f"{change_pct:.2f}%",
                                'Cao nh·∫•t': f"{chart['max_value']:,.2f}",
                                'Th·∫•p nh·∫•t': f"{chart['min_value']:,.2f}"
                            })
                    
                    # Hi·ªÉn th·ªã b·∫£ng t·ªïng h·ª£p
                    if summary_data:
                        st.write("### üìä T·ªïng h·ª£p t·∫•t c·∫£ ch·ªâ s·ªë")
                        summary_df = pd.DataFrame(summary_data)
                        st.dataframe(summary_df, use_container_width=True)
                        
                        # Ph√¢n t√≠ch t·ªïng quan b·∫±ng AI
                        overall_prompt = f"""
                        Ph√¢n t√≠ch t·ªïng quan n·ªÅn kinh t·∫ø {selected_country} d·ª±a tr√™n {len(chart_data_list)} ch·ªâ s·ªë:
                        
                        """
                        
                        for chart in chart_data_list:
                            df = chart['data']
                            change_pct = ((df['value'].iloc[-1] - df['value'].iloc[0]) / df['value'].iloc[0] * 100) if df['value'].iloc[0] != 0 else 0
                            overall_prompt += f"""
                            - {chart['indicator_name']}: {chart['latest_value']} ({chart['latest_year']}), xu h∆∞·ªõng {chart['trend']} ({change_pct:.2f}%)
                            """
                        
                        overall_prompt += """
                        H√£y ƒë∆∞a ra ƒë√°nh gi√° t·ªïng quan v·ªÅ:
                        1. T√¨nh h√¨nh kinh t·∫ø hi·ªán t·∫°i
                        2. M·ª©c ƒë·ªô ·ªïn ƒë·ªãnh v√† tƒÉng tr∆∞·ªüng
                        3. C√°c lƒ©nh v·ª±c m·∫°nh/y·∫øu
                        4. Tri·ªÉn v·ªçng ph√°t tri·ªÉn
                        """
                        
                        # G·ªçi AI ph√¢n t√≠ch t·ªïng quan
                        overall_analysis = ai_analyzer.analyze_overall_economy(overall_prompt)
                        st.write("### üß† Ph√¢n t√≠ch t·ªïng quan kinh t·∫ø")
                        st.write(overall_analysis)
                        
                except Exception as e:
                    st.error(f"L·ªói khi ph√¢n t√≠ch t·ªïng quan: {str(e)}")

    # =========================
    # PH·∫¶N TH√îNG TIN T·ª™ AI (SIDEBAR)
    # =========================
    
    # Hi·ªÉn th·ªã tr·ª±c ti·∫øp ph·∫ßn ph√¢n t√≠ch n√¢ng cao
    with st.expander(f"Ph√¢n t√≠ch n√¢ng cao: {selected_country}", expanded=False):
        st.header(f"B√°o c√°o ph√¢n t√≠ch n√¢ng cao cho {selected_country}")
        st.caption("C√°c ph√¢n t√≠ch n√†y ƒë∆∞·ª£c m√¥ ph·ªèng t·ª± ƒë·ªông t·ª´ AI (kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn d·ªØ li·ªáu ch√≠nh).")

        # Danh s√°ch c√°c ch·ª©c nƒÉng m·ªü r·ªông
        functions = {
            "Ph√¢n t√≠ch xu h∆∞·ªõng kinh t·∫ø": ai_analyzer.analyze_economic_trends,
            "Ph√¢n t√≠ch nh√¢n kh·∫©u h·ªçc": ai_analyzer.analyze_population_demographics,
            "ƒê√°nh gi√° ti·ªÅm nƒÉng ph√°t tri·ªÉn": ai_analyzer.analyze_development_potential,
        }

        for title, analysis_function in functions.items():
            with st.expander(f"{title}"):
                with st.spinner(f"ƒêang x·ª≠ l√Ω {title.lower()}..."):
                    try:
                        content = analysis_function(selected_country)
                        st.write(content)
                    except Exception as e:
                        st.error(f"L·ªói khi ph√¢n t√≠ch: {str(e)}")
                    time.sleep(1)

        st.success("Ho√†n t·∫•t ph√¢n t√≠ch m·ªü r·ªông!")
else:
    st.sidebar.warning("Kh√¥ng c√≥ d·ªØ li·ªáu qu·ªëc gia trong database")
    st.info("‚¨ÖÔ∏è H√£y ch·ªçn m·ªôt qu·ªëc gia ·ªü thanh b√™n ƒë·ªÉ xem d·ªØ li·ªáu chi ti·∫øt.")