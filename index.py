import streamlit as st
import plotly.express as px
import pandas as pd
from api_utils import (
    get_sample_country_info_api,get_country_info_map,
    valid_iso3_codes, indicator_mapping, geo_regions,get_country_data_by_iso3,income_groups
)


# ·∫®n sidebar m·∫∑c ƒë·ªãnh c·ªßa Streamlit multi-page app
st.markdown("""
    <style>
        section[data-testid="stSidebar"] {display: none;}
        div[data-testid="collapsedControl"] {display: none;}
    </style>
""", unsafe_allow_html=True)

# =========================
# üîß C·∫§U H√åNH GIAO DI·ªÜN
# =========================
st.set_page_config(page_title="World Map Interactive", layout="wide")

# CSS
try:
    with open("style.css", "r",encoding="utf-8") as css_file:
        st.markdown(f"<style>{css_file.read()}</style>", unsafe_allow_html=True)
except FileNotFoundError:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file `style.css`.")

# Header HTML
try:
    with open("header.html", "r",encoding="utf-8") as html_file:
        st.markdown(html_file.read(), unsafe_allow_html=True)
except FileNotFoundError:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file `header.html`.")

# =========================
# üìä X·ª¨ L√ù D·ªÆ LI·ªÜU
# =========================
def process_country_data():
    """L·∫•y d·ªØ li·ªáu t·ª´ DB v√† ph√¢n lo·∫°i h·ª£p l·ªá / b·ªã lo·∫°i."""
    data = get_country_info_map()
    valid, excluded = [], []

    for country in data:
        name = country.get("name", "").lower()
        iso = country.get("iso_code", None)
        entry = {
            "code": iso,
            "country_name": country.get("name"),
            "gdp_billion": country.get("indicator", {}).get("NY.GDP.MKTP.CD", 0) / 1e9,
            "population": country.get("indicator", {}).get("SP.POP.TOTL"),
            "gdp_per_capita": country.get("indicator", {}).get("NY.GDP.PCAP.CD"),
            "unemployment_rate": country.get("indicator", {}).get("SL.UEM.TOTL.ZS"),
            "inflation_rate": country.get("indicator", {}).get("FP.CPI.TOTL.ZG")
        }

        if name == "world" or iso not in valid_iso3_codes:
            excluded.append(entry)
        else:
            valid.append(entry)

    return pd.DataFrame(valid), pd.DataFrame(excluded)

def enrich_with_coordinates(df):
    """B·ªï sung t·ªça ƒë·ªô t·ª´ API."""
    coords = []
    for code in df["code"]:
        info = get_sample_country_info_api(code)
        coords.append({
            "code": code,
            "latitude": info.get("latitude") if "error" not in info else None,
            "longitude": info.get("longitude") if "error" not in info else None
        })
    return df.merge(pd.DataFrame(coords), on="code", how="left")

# Chu·∫©n b·ªã d·ªØ li·ªáu
valid_df, excluded_df = process_country_data()
merged_df = enrich_with_coordinates(valid_df)

# =========================
# üåç HI·ªÇN TH·ªä B·∫¢N ƒê·ªí
# =========================
st.markdown("### üåê B·∫£n ƒë·ªì t∆∞∆°ng t√°c c√°c ch·ªâ s·ªë kinh t·∫ø")

# Ch·ªçn ch·ªâ s·ªë hi·ªÉn th·ªã
col_label, col_dropdown = st.columns([1, 3])
with col_label:
    st.markdown("**Ch·ªçn ch·ªâ s·ªë hi·ªÉn th·ªã:**")
with col_dropdown:
    selected_indicator = st.selectbox(
        "Ch·ªçn ch·ªâ s·ªë",
        options=list(indicator_mapping.keys()),
        format_func=lambda x: indicator_mapping[x],
        label_visibility="collapsed"
    )

map_title = f"B·∫£n ƒë·ªì {indicator_mapping[selected_indicator]} nƒÉm 2024"
fig = px.choropleth(
    merged_df,
    locations="code",
    color=selected_indicator,
    hover_name="country_name",
    hover_data=["population", "gdp_per_capita", "unemployment_rate", "inflation_rate"],
    color_continuous_scale=px.colors.sequential.Plasma,
    title=map_title,
    projection="natural earth"
)

st.plotly_chart(fig, use_container_width=True)

# =========================
# üìã HI·ªÇN TH·ªä B·∫¢NG D·ªÆ LI·ªÜU
# =========================
def format_df(df):
    """ƒê·ªãnh d·∫°ng l·∫°i b·∫£ng d·ªØ li·ªáu cho d·ªÖ ƒë·ªçc."""
    df = df.copy()
    for col in ["gdp_billion", "gdp_per_capita", "unemployment_rate", "inflation_rate", "latitude", "longitude"]:
        if col in df:
            df[col] = df[col].round(2)

    df = df.rename(columns={
        "code": "M√£ ISO",
        "country_name": "T√™n qu·ªëc gia",
        "gdp_billion": "T·ªïng GDP (t·ª∑ USD)",
        "population": "D√¢n s·ªë",
        "gdp_per_capita": "GDP b√¨nh qu√¢n (USD)",
        "unemployment_rate": "T·ª∑ l·ªá th·∫•t nghi·ªáp (%)",
        "inflation_rate": "T·ª∑ l·ªá l·∫°m ph√°t (%)",
        "latitude": "Vƒ© ƒë·ªô",
        "longitude": "Kinh ƒë·ªô"
    })
    return df

display_df = format_df(merged_df)

# T·∫°o mapping format cho Styler
format_map = {
    "T·ªïng GDP (t·ª∑ USD)": "{:,.2f}",
    "D√¢n s·ªë": "{:,.0f}",               
    "GDP b√¨nh qu√¢n (USD)": "{:,.2f}",
    "T·ª∑ l·ªá th·∫•t nghi·ªáp (%)": "{:,.2f}",
    "T·ª∑ l·ªá l·∫°m ph√°t (%)": "{:,.2f}",
    "Vƒ© ƒë·ªô": "{:,.2f}",
    "Kinh ƒë·ªô": "{:,.2f}"
}
styled = display_df.style.format(format_map)


st.subheader("D·ªØ li·ªáu c√°c ch·ªâ s·ªë kinh t·∫ø qu·ªëc gia:")
search_valid = st.text_input("T√¨m ki·∫øm qu·ªëc gia (theo t√™n ho·∫∑c m√£ ISO):", key="valid_search")

if search_valid:
    display_df = display_df[
        display_df["T√™n qu·ªëc gia"].str.contains(search_valid, case=False, na=False) |
        display_df["M√£ ISO"].str.contains(search_valid, case=False, na=False)
    ]
st.dataframe(styled, use_container_width=True, height=400)

# =========================
# üìä BI·ªÇU ƒê·ªí TR√íN PH√ÇN B·ªê GDP & D√ÇN S·ªê
# =========================
geo_df = excluded_df[excluded_df["code"].isin(geo_regions)]
if not geo_df.empty:
    st.markdown("### üìä Ph√¢n b·ªë kinh t·∫ø & d√¢n s·ªë theo khu v·ª±c")

    # Format text hi·ªÉn th·ªã khi hover
    geo_df["hover_gdp"] = (
        "Khu v·ª±c: " + geo_df["country_name"].astype(str) +
        "<br>GDP (t·ª∑ USD): " + geo_df["gdp_billion"].map("{:,.2f}".format) +
        "<br>D√¢n s·ªë: " + geo_df["population"].map("{:,.0f}".format)
    )
    geo_df["hover_pop"] = geo_df["hover_gdp"]  # d√πng chung format

    # Bi·ªÉu ƒë·ªì tr√≤n GDP
    fig_gdp = px.pie(
        geo_df,
        values="gdp_billion",
        names="country_name",
        title="üí∞ T·ª∑ tr·ªçng GDP theo khu v·ª±c",
        hole=0.3
    )
    fig_gdp.update_traces(textinfo="percent+label", hovertemplate="%{customdata}")
    fig_gdp.update_traces(customdata=geo_df["hover_gdp"])

    # Bi·ªÉu ƒë·ªì tr√≤n D√¢n s·ªë
    fig_pop = px.pie(
        geo_df,
        values="population",
        names="country_name",
        title="üë• T·ª∑ tr·ªçng d√¢n s·ªë theo khu v·ª±c",
        hole=0.3
    )
    fig_pop.update_traces(textinfo="percent+label", hovertemplate="%{customdata}")
    fig_pop.update_traces(customdata=geo_df["hover_pop"])

    # Hi·ªÉn th·ªã song song
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig_gdp, use_container_width=True)
    with col2:
        st.plotly_chart(fig_pop, use_container_width=True)
else:
    st.info("Kh√¥ng c√≥ nh√≥m khu v·ª±c ƒë·ªãa l√Ω trong d·ªØ li·ªáu b·ªã lo·∫°i.")

# =========================
# üí∞ NH√ìM THU NH·∫¨P / PH√ÅT TRI·ªÇN KINH T·∫æ
# =========================


income_df = excluded_df[excluded_df["code"].isin(income_groups)]

if not income_df.empty:
    st.markdown("### üí∏ Ph√¢n b·ªë GDP & d√¢n s·ªë theo **nh√≥m thu nh·∫≠p** (World Bank classification)")

    # Bi·ªÉu ƒë·ªì tr√≤n GDP
    fig_gdp_income = px.pie(
        income_df,
        values="gdp_billion",
        names="country_name",
        title="üí∞ T·ª∑ tr·ªçng GDP theo nh√≥m thu nh·∫≠p",
        hover_data=["code", "gdp_billion", "population"],
        hole=0.3
    )
    fig_gdp_income.update_traces(textinfo="percent+label")

    # Bi·ªÉu ƒë·ªì tr√≤n D√¢n s·ªë
    fig_pop_income = px.pie(
        income_df,
        values="population",
        names="country_name",
        title="üë• T·ª∑ tr·ªçng d√¢n s·ªë theo nh√≥m thu nh·∫≠p",
        hover_data=["code", "population", "gdp_billion"],
        hole=0.3
    )
    fig_pop_income.update_traces(textinfo="percent+label")

    # Hi·ªÉn th·ªã song song
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig_gdp_income, use_container_width=True)
    with col2:
        st.plotly_chart(fig_pop_income, use_container_width=True)

    # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu g·ªëc
    st.markdown("#### üìã D·ªØ li·ªáu chi ti·∫øt theo nh√≥m thu nh·∫≠p")
    income_display = format_df(income_df)
    st.dataframe(
        income_display.style.format({
            "T·ªïng GDP (t·ª∑ USD)": "{:,.2f}",
            "D√¢n s·ªë": "{:,.0f}"
        }),
        use_container_width=True,
        height=400
    )

else:
    st.info("Kh√¥ng c√≥ nh√≥m thu nh·∫≠p trong d·ªØ li·ªáu b·ªã lo·∫°i.")

if not income_df.empty:
    st.markdown("### üíπ So s√°nh tƒÉng tr∆∞·ªüng c√°c ch·ªâ s·ªë kinh t·∫ø theo **nh√≥m thu nh·∫≠p**")

    # B∆∞·ªõc 1: L·∫•y d·ªØ li·ªáu chi ti·∫øt t·ª´ng qu·ªëc gia
    all_records = []
    for _, row in income_df.iterrows():
        iso3 = row["code"]
        country_name = row["country_name"]
        income_group = row.get("income_group", "Kh√¥ng x√°c ƒë·ªãnh")

        country_data = get_country_data_by_iso3(iso3_code=iso3)
        if not country_data["data"]:
            continue

        # L∆∞u d·ªØ li·ªáu t·ª´ng ch·ªâ s·ªë c·ªßa qu·ªëc gia
        for indicator_code, indicator_data in country_data["data"].items():
            for entry in indicator_data["data"]:
                all_records.append({
                    "year": entry["year"],
                    "value": entry["value"],
                    "indicator": indicator_code,
                    "country_name": country_name,
                    "income_group": income_group
                })
            
    # B∆∞·ªõc 2: Gom d·ªØ li·ªáu l·∫°i
    if not all_records:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ch·ªâ s·ªë n√†o kh·∫£ d·ª•ng ƒë·ªÉ hi·ªÉn th·ªã.")
    else:
        df_all = pd.DataFrame(all_records)

        # Ki·ªÉm tra d·ªØ li·ªáu
        if "income_group" not in df_all.columns:
            st.error("‚ùå Thi·∫øu c·ªôt 'income_group' trong d·ªØ li·ªáu. H√£y ƒë·∫£m b·∫£o income_df c√≥ tr∆∞·ªùng n√†y.")
        else:
            # T√≠nh gi√° tr·ªã trung b√¨nh m·ªói nh√≥m theo t·ª´ng nƒÉm v√† t·ª´ng ch·ªâ s·ªë
            grouped = (
                df_all.groupby(["year", "country_name", "indicator"], as_index=False)
                .agg({"value": "mean"})
            )

            # B∆∞·ªõc 3: V·∫Ω bi·ªÉu ƒë·ªì cho t·ª´ng ch·ªâ s·ªë
            indicators = grouped["indicator"].unique()

            for ind in indicators:
                sub_df = grouped[grouped["indicator"] == ind]

                # L·∫•y t√™n ƒë·∫ßy ƒë·ªß n·∫øu c√≥ mapping
                indicator_name = indicator_mapping.get(ind, ind)

                fig = px.line(
                    sub_df,
                    x="year",
                    y="value",
                    color="country_name",  # m·ªói nh√≥m thu nh·∫≠p = 1 ƒë∆∞·ªùng
                    markers=True,
                    title=f"üìà {indicator_name} theo nh√≥m thu nh·∫≠p (Trung b√¨nh theo nƒÉm)",
                    labels={
                        "year": "NƒÉm",
                        "value": "Gi√° tr·ªã trung b√¨nh",
                        "income_group": "Nh√≥m thu nh·∫≠p"
                    }
                )

                # T√πy ch·ªânh hi·ªÉn th·ªã
                fig.update_traces(mode="lines+markers", line=dict(width=2))
                fig.update_layout(
                    legend_title_text="Nh√≥m thu nh·∫≠p",
                    hovermode="x unified"
                )

                # Hi·ªÉn th·ªã chart
                st.plotly_chart(fig, use_container_width=True)


# B·∫£ng d·ªØ li·ªáu b·ªã lo·∫°i
if not excluded_df.empty:
    excluded_df = excluded_df[~excluded_df["code"].isin(geo_regions + income_groups)]
    st.subheader("üö´ D·ªØ li·ªáu b·ªã lo·∫°i (kh√¥ng √°nh x·∫° ƒë∆∞·ª£c qu·ªëc gia)")
    excluded_display = format_df(excluded_df)
    st.dataframe(excluded_display, use_container_width=True, height=400)

